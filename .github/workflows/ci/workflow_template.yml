name: CI

on: [push, pull_request]

defaults:
  run:
    # Powershell on Windows? No thank you...
    shell: bash --noprofile --norc -eo pipefail .github/workflows/ci/helpers.sh . {0}

jobs:

  <% for j in jobs %>
  # Job: <@ j.name @> {{{
  <@ j.id @>:

    name: <@ j.name @>
    runs-on: <@ j.platform @>
    needs: [<@ j.needs|join(', ') @>]

    steps:

      - name: Checkout
        uses: <@ action_checkout @>
      <% if j.type in ['build', 'test_packaging'] %>
        with:
          # We need the whole history for patching the version.
          fetch-depth: 0
      <% endif %>

      <% if j.os != 'macOS' %>
      - name: Setup Python
        uses: <@ action_setup_python @>
        with:
          python-version: <@ j.python @>

      <% endif %>
      - name: Set cache name
        id: set_cache
        run: setup_cache_name '<@ j.python @>' '<@ j.platform @>'

      - name: Setup cache
        uses: <@ action_cache @>
        with:
          path: .cache
          key: <@ cache_epoch @>_${{ steps.set_cache.outputs.cache_name }}_${{ hashFiles('reqs/constraints.txt'<% for d in (j.reqs + j.cache_extra_deps) %><@ ', %r' % d @><% endfor %>) }}

      - name: Setup pip options
        run: setup_pip_options

      <% if j.os == 'macOS' %>
      # To support older macOS versions, setup Python from an official installer.
      - name: Setup Python
        run: setup_osx_python '<@ j.python @>'

      <% endif %>
      <% if j.type == 'build' and j.os == 'Linux' %>
      - name: Install system dependencies
        run: apt_get_install libdbus-1-dev libdbus-glib-1-dev libudev-dev libusb-1.0-0-dev

      <% endif %>
      - name: Setup Python environment
        run: setup_python_env -c reqs/constraints.txt<% for r in j.reqs %> -r <@ r @><% endfor %>

      <% if j.type in ['build', 'test_packaging'] %>
      - name: Patch version
        run: python setup.py patch_version

      <% endif %>
      <% if j.type == 'test' %>
      # Test {{{

      - name: Run tests
        run: run_tests

      # }}}

      <% endif %>
      <% if j.type == 'test_packaging' %>
      # Test packaging {{{

      - name: Run packaging sanity checks
        run: packaging_checks

      - name: Archive artifact (sdist)
        if: <@ is_release @>
        uses: <@ action_upload_artifact @>
        with:
          name: Source
          path: dist/*.tar.gz

      - name: Archive artifact (wheel)
        if: <@ is_release @>
        uses: <@ action_upload_artifact @>
        with:
          name: Wheel
          path: dist/*.whl

      # }}}

      <% endif %>
      <% if j.type == 'build' %>
      # Build {{{

      <% if j.os == 'Linux' %>
      - name: Build distribution (Linux AppImage)
        run: python setup.py -q bdist_appimage -- --no-update-tools

      - name: Archive artifact (Linux AppImage)
        uses: <@ action_upload_artifact @>
        with:
          name: Linux AppImage
          path: dist/*.AppImage

      <% endif %>
      <% if j.os == 'macOS' %>
      - name: Build distribution (macOS DMG)
        run: python setup.py -q bdist_dmg

      - name: Archive artifact (macOS DMG)
        uses: <@ action_upload_artifact @>
        with:
          name: macOS DMG
          path: dist/*.dmg

      <% endif %>
      <% if j.os == 'Windows' %>
      - name: Build distributions (Windows)
        run: |
          # Note: we avoid using the WSL bash (which does not work).
          bash="$(cygpath -w -a "$(which bash)")"
          python setup.py -q bdist_win -t -z -i --bash="$bash"

      - name: Archive artifact (Windows Installer)
        uses: <@ action_upload_artifact @>
        with:
          name: Windows Installer
          path: dist/*.exe

      - name: Archive artifact (Windows ZIP)
        uses: <@ action_upload_artifact @>
        with:
          name: Windows ZIP
          path: dist/*.zip

      <% endif %>
      # }}}

      <% endif %>
      - name: List cache contents
        run: list_cache
  # }}}

  <% endfor %>
  # Job: Release {{{
  release:

    name: Release
    environment: release
    runs-on: ubuntu-latest
    needs: [<@ jobs|join(', ', attribute='id') @>]
    if: <@ is_release @>

    steps:

      - name: Checkout
        uses: <@ action_checkout @>

      - name: Setup Python
        uses: <@ action_setup_python @>
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          apt_get_install -qq pandoc
          run "$python" -m pip install twine

      - name: Download artifacts
        uses: <@ action_download_artifact @>
        with:
          path: dist

      - name: Publish PyPI release
        env:
          TWINE_NON_INTERACTIVE: 1
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          # Optional: twine will fallback to default if empty.
          TWINE_REPOSITORY_URL: ${{ secrets.PYPI_URL }}
        run: publish_pypi_release

      - name: Publish GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: publish_github_release
  # }}}

# vim: foldmethod=marker foldlevel=0
